@page "/"
@inject CA2WFVoidWeatherSystems.Services.WeatherAPIService WeatherAPIService
@rendermode InteractiveServer
@using CA2WFVoidWeatherSystems.Services
@using CA2WFVoidWeatherSystems.Models
@using CA2WFVoidWeatherSystems.Business

<PageTitle>Home</PageTitle>
<link rel="stylesheet" href="Form.css" />
<link rel="stylesheet" href="WeatherCard.css" />
<h1 class="gold-theme">Welcome To Void Weather Systems</h1>

<div class="gold-theme">
    Needing accurate location based weather prediction . We here at Void Weather systems can provide that in simple and concise format without hassel
    A small demonstration is at hand here to prove what is capable with endpoints 
</div>
<div class="form" style="margin:2.5rem">
    <form @onsubmit="HandleSubmitAsync">
        <div class="dropdown-container">
            <label for="inputType" class="form-label">Select Location Input Type:</label>
            <select id="inputType" class="dropdown"
            @bind="selectedOption"
            @bind:after="HandleInputTypeChange">
                <option value="city">City Name</option>
                <option value="coordinates">Longitude/Latitude</option>
                <option value="ip">IP Address</option>
            </select>
        </div>
        <label for="inputDetails" class="form-label">Enter Location Details:</label>
        <div class="search-container">
            <input type="text" id="searchInput" class="form-control search-input"
            @bind-value="SearchInput" placeholder="@Hint" />
            <button type="submit" class="btn btn-primary search-button">Search</button>
        </div>
        <p class="error-message">@ValidationErrorMessage</p>
    </form>
</div>
@if (WeatherResponse != null)
{
    <div class="weather-card">
        <div class="weather-header">
            <h3>@WeatherResponse.location.name, @WeatherResponse.location.country</h3>
            <p>@WeatherResponse.report.last_updated</p>
        </div>

        <div class="weather-body">
            <div class="weather-icon">
                <img src="https:@WeatherResponse.report.condition.icon" alt="Weather icon" />
            </div>
            <div class="weather-info">
                <h2>@WeatherResponse.report.temp_c °C</h2>
                <p><strong>Wind:</strong> @WeatherResponse.report.wind_mph mph, @WeatherResponse.report.wind_dir</p>
                <p><strong>Humidity:</strong> @WeatherResponse.report.humidity %</p>
                <p><strong>Cloud:</strong> @WeatherResponse.report.cloud %</p>
            </div>
        </div>
    </div>
}

@code {

    private WeatherAPIResponse WeatherResponse;
    private string selectedOption = "city"; // Default dropdown value
    private string SearchInput = "";       
    private string ValidationErrorMessage = ""; // Error message
    private string Hint = "City name (e.g., London)"; 

    private void HandleInputTypeChange()
    {
        switch (selectedOption)
        {
            case "city":
                Hint = "City name (e.g., London)";
                break;
            case "coordinates":
                Hint = "Longitude, Latitude (e.g., -0.13, 51.51)";
                break;
            case "ip":
                Hint = "IP Address (e.g., 192.168.1.1)";
                break;
        }
    }

    private async Task HandleSubmitAsync()
    {
        //perform validation based on the selected input type
        ValidationErrorMessage = validation.ValidateLocation(SearchInput,selectedOption);
        

        if (string.IsNullOrEmpty(ValidationErrorMessage))
        {
            // Fetch weather data based on the user's input
            WeatherResponse = await WeatherAPIService.GetWeatherCurrentBasedOnLocationDataAsync(SearchInput, selectedOption);
            if (WeatherResponse == null)
            {
                ValidationErrorMessage = "Could not fetch weather data. Please try again.";
            }
          
        }

    }
}